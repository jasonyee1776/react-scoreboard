{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Crown.js","components/Player.js","components/AddPlayerForm.js","components/App.js","index.js"],"names":["Stats","players","totalPlayers","length","totalPoints","reduce","total","player","score","className","Stopwatch","state","isRunning","elapsedTime","previousTime","handleStopwatch","setState","prevState","Date","now","tick","handleReset","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","title","defaultProps","Counter","index","changeScore","Crown","isHighScore","viewBox","d","transform","width","height","Player","props","removePlayer","name","console","log","id","PureComponent","AddPlayerForm","value","handleValueChange","e","target","handleSubmit","preventDefault","trim","alert","addPlayer","onSubmit","type","placeholder","onChange","App","prevPlayerId","handleRemovePlayer","filter","p","handleScoreChange","delta","handleAddNewPlayer","getHighScore","scores","map","highScore","max","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a66d43c2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Stats = ({ players }) => {\n    /* \n        - Desstructuring allows us to pull out properties from an object\n        - In this case we're destructuing the props objects\n            - Destructure props by setting an objects as funciton parameters\n            - Can also destrucutre props with a variable assignment\n\n    */ \n\n    const totalPlayers = players.length;\n    const totalPoints = players.reduce( (total, player) => {\n        return total + player.score;\n    }, 0)\n\n    return (\n        <table className='stats'>\n            <tbody>\n                <tr>\n                    <td>Players: </td>\n                    <td>{totalPlayers}</td>\n                </tr>\n                <tr>\n                    <td>Total Points</td>\n                    <td>{totalPoints}</td>\n                </tr>\n            </tbody>\n        </table>\n    )\n\n}\n\nStats.propTypes = {\n    player: PropTypes.arrayOf(PropTypes.shape({\n        score: PropTypes.number\n    })) \n}\n\nexport default Stats;","import React, { Component } from 'react';\n\nclass Stopwatch extends Component {\n\n    state = {\n        isRunning: false,\n        elapsedTime: 0,\n        previousTime: 0\n    }\n\n    handleStopwatch = () => {\n        this.setState( prevState => ({ \n            isRunning: !prevState.isRunning \n        }))\n        if (!this.state.isRunning) {\n            this.setState({ previousTime: Date.now() })\n        }\n\n    }\n\n    /*\n        React Lifecycle Methods (also called Lifecycle Hooks)\n            - Built-in methods that get called at each point in the life cycle\n            - Act as Hooks that run code at key times in components life cycle\n            - Give us the abilty to control what happens when component mounts. updates, unmounts\n    */\n\n    // componentDidMount() gets called by React when component gets inserted or mounted onto DOM\n    componentDidMount() {\n        this.intervalID = setInterval(() => this.tick(), 100)\n    }\n\n    // Anytime componentDidMount() is invoked it's important to also handle what should happen if the component were to unmount\n    // Important to handle unmounted components as it could cause memory leaks\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    tick = () => {\n        if (this.state.isRunning) {\n            const now = Date.now();\n            this.setState( prevState => ({\n                previousTime: now,\n                elapsedTime: prevState.elapsedTime + (now - this.state.previousTime) \n            }))\n        }\n    }\n\n    handleReset= () => {\n        this.setState({ elapsedTime: 0 });\n    }\n    \n\n    render() {\n        const seconds = Math.floor(this.state.elapsedTime/1000);\n        return(\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <span className=\"stopwatch-time\">{ seconds }</span>\n                <button onClick={this.handleStopwatch}>{this.state.isRunning ? \"Stop\" : \"Start\"}</button>\n                <button onClick={this.handleReset}>Reset</button>\n            </div>\n        )\n    };\n};\n\nexport default Stopwatch;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport Stats from './Stats';\nimport Stopwatch from './Stopwatch';\n\nconst Header = ({ players, title }) => {\n    return (\n      <header>\n        <Stats \n            players={players}\n        />\n        <h1>{ title }</h1>\n        <Stopwatch />\n      </header>\n    );\n  }\n\nHeader.propTypes = {\n  players: PropTypes.arrayOf(PropTypes.object) ,\n  title: PropTypes.string\n}\n\n// Can also give components a default value for props using the \"defaultProps\" property\n// If Header component is already supplied a \"title\" prop, that value will take priority over the \"defaultProps\" value \n\nHeader.defaultProps = {\n  title: \"Scoreboard\"\n}\n\n  export default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = ({ index, score, changeScore}) => {\n    \n    \n   /*  \n   incrementScore = () => {\n      this.setState( prevState => ({\n        score: prevState.score + 1\n      }));\n    }\n  \n    decrementScore = () => {\n      this.setState( prevState => ({\n        score: prevState.score - 1\n      }));\n    } \n    */\n  \n    \n    return (\n    <div className=\"counter\">\n        <button className=\"counter-action decrement\" onClick={() => changeScore(index, -1)}> - </button>\n        <span className=\"counter-score\">{ score }</span>\n        <button className=\"counter-action increment\" onClick={() => changeScore(index, 1)}> + </button>\n    </div>\n    );\n\n  }\n\n  Counter.propTypes = {\n    index: PropTypes.number ,\n    score: PropTypes.number,\n    changeScore: PropTypes.func\n  }\n\n  export default Counter;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Crown = ({ isHighScore }) => (\n\n    <svg viewBox=\"0 0 44 35\"  className={isHighScore ? 'is-high-score' : null}>\n        <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\n        <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\n    </svg>\n)\n    // add PropTypes\nCrown.propTypes = {\n    isHighScore: PropTypes.bool\n}\n\nexport default Crown;","import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport Counter from './Counter';\nimport Crown from './Crown';\n \n/*\n  const Player = (this.props) => {\n    return (\n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={() => this.props.removePlayer(this.props.id)}>✖</button>\n          { this.props.name }\n        </span>\n  \n        <Counter \n            score={this.props.score}\n            changeScore={this.props.changeScore}\n            index={this.props.index}\n        />\n      </div>\n    );\n  }\n\n- React provides a special type of component, called PureComponent, that helps prevent unnecessary re-renders. \n- If your component’s render() method renders the same result given the same this.props and state, you can use PureComponent for a performance boost in some cases.\n- Re-write Player component as a Pure Component\n\n*/\n\nclass Player extends PureComponent {\n  // PropTypes for Class Components can be defined within Class component before the render() method using the \"static\" declaration\n  // Using \"static\" means we do not have to instantiate the Class Component\n\n  static propTypes = {\n    removePlayer: PropTypes.func,\n    id: PropTypes.number,\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    changeScore: PropTypes.func,\n    index: PropTypes.number,\n    isHighScore: PropTypes.bool\n  };\n\n  render() {\n    // destructure props with variable assignment\n    const { \n      removePlayer,\n      name,\n      score,\n      changeScore,\n      isHighScore,\n      index\n    } = this.props\n    console.log(name + \" rendered\")\n    return (\n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={() => removePlayer(id)}>✖</button>\n          <Crown \n            isHighScore={isHighScore}\n          />\n          { name }\n        </span>\n  \n        <Counter \n            score={score}\n            changeScore={changeScore}\n            index={index}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Player;\n      ","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/* \n    - <form> and <input> elements on React act different than other elements\n        - Naturally keep internal state\n    - In order to get the value from a React Form element we must create a \"Controlled Input\"\n        - Element whose value is controlled by react with state\n        1) Create state for \"value\" of <input> \n        2) Listen for changes on input to detect when value is updated\n        3) Create event handler that updates the state (state of this particular class component's) \n*/\n\nclass AddPlayerForm extends Component {\n    state = {\n        value: ''\n    }\n\n    /* \n        - Refs provide a way to access DOM nodes or React elements created in the render method.\n    */\n\n    handleValueChange = (e) => {\n        this.setState({ value: e.target.value});\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.value.trim() == \"\") {\n            alert('Input can not be empty.');\n            return false;\n        } else {\n            this.props.addPlayer(this.state.value);\n            this.setState({\n                value: ''\n            }\n        )}\n    }\n\n    // Class component PropType validation of addPlayer() function\n    static propTypes = {\n        addPlayer: PropTypes.func\n    }\n\n    render() {\n        console.log(this.state.value);\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input \n                    type=\"text\"\n                    placeholder=\"Enter Player's Name\"\n                    value={this.state.value}\n                    onChange={this.handleValueChange}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Add Player\"\n                />\n            </form>\n        )\n    }\n}\n\nexport default AddPlayerForm;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Player from './Player';\nimport AddPlayerForm from './AddPlayerForm';\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"Jason\" ,\n        score: 0,\n        id: 1\n      },\n      {\n        name: \"Mason\" ,\n        score: 0,\n        id: 2\n      },\n      {\n        name: \"Nason\" ,\n        score: 0,\n        id: 3\n      },\n      {\n        name: \"Grayson\" ,\n        score: 0,\n        id: 4\n      },\n       {\n        name: \"Kaison\" ,\n        score: 0,\n        id: 5\n      }\n    ],\n    title: 'Fooking Scoreboard'\n  };\n\n  // tracking player ID\n  prevPlayerId = 5;\n\n\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  }\n\n  handleScoreChange = (index, delta) => {\n    this.setState( prevState => ({\n      score: prevState.players[index].score += delta\n    }));\n\n  }\n\n  // Fucntion below adds new Players\n  // Need to bring in previous Players object from App State and combine them with new Player object\n  // Below example uses spread opperator    \n  \n/*\n  - BEST PRACTICE TO UPDATE TO A NEW STATE USING PREVIOUS STATE TO ENSURE YOU ARE USING THE MOST UP TO DATE \"STATE\"\n    - EX: state sometimes gets upated in batches and this might cause a delay in updating state \n\n  handleAddNewPlayer = (name) => {\n    this.setState({\n      players: [ \n        ...this.state.players,\n        {\n          name: name,\n          score: 0,\n          id: this.prevPlayerId += 1\n        }\n      ]\n    })\n  }\n*/\n\n  handleAddNewPlayer = (name) => {\n    this.setState( prevState => {\n      return {\n        players: [ \n          ...prevState.players,\n          {\n            name: name,\n            score: 0,\n            id: this.prevPlayerId += 1\n          }\n        ]\n      }\n    })\n  }\n\n// create function that filters out player with highest score\ngetHighScore = () => {\n  const scores = this.state.players.map( p => p.score)\n  const highScore = Math.max(...scores)\n  console.log(highScore)\n  if (highScore) {\n    return highScore;\n  }\n  return null;\n}\n\n\n\n  render() {\n    const highScore = this.getHighScore();\n    return (\n      <div className=\"scoreboard\">\n        <Header \n          players={this.state.players}\n          title={this.state.title}\n        />\n        {/* Players list \n            map() has an optional buitl-in \"index\" parameter \n          */}\n        {this.state.players.map( (player, index) =>\n          <Player \n            name={player.name}\n            id={player.id}\n            key={player.id.toString()} \n            removePlayer={this.handleRemovePlayer}\n            score={player.score}\n            changeScore={this.handleScoreChange}\n            index={index}\n            // returns boolean value\n            isHighScore={highScore === player.score}\n            />\n        )}\n          <AddPlayerForm \n            addPlayer={this.handleAddNewPlayer}\n          />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}